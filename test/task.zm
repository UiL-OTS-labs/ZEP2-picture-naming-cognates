/******************************************************************************\
FILE:           task.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     -

DESCRIPTION:

Picture Naming


Global structure of this experiment phase:

  - instructions

  - practice part
      trial

  - pause

  - test part
      trial


HISTORY:
2012-04-19 TV   Created.
2017-01-09 TV   Adapted for Zep 2.0.

\******************************************************************************/

//requires 2.6;

plugin zep_file;
import std_sound_input_device;
import std_sound_capture;

import defs;
import stimuli;
import shuffle;
import output;
import test_page;
import instructions;


Block task
{
    Part instructions
    {
        on_event:entry()
        {
//            pause_page.set_text_size(1000, 600);
            pause_page.set_text(PRAC_INSTRUCTION, true);
            pause_page.action(this);
        }
    }


    Block practice
    {
        TestItem        item;   // current item


        on_event:entry()
        {
            num_cycles = prac_items.size;

            // Prepare test page: progress bar and prompt enabled.
            test_page.setup(num_cycles, true);

            // Create folder for audio recordings and start recording in 100ms.
//            string dir = data_dir() + script_name() + "/";
//            if (!file_exists(dir)) create_dir_tree(dir);
//            string fn = dir + "ses-" +
//                format(expdb.session.id, 4) + "-prac.wav";
//            sound_capture.rec(fn, reference_time + 100ms, 0s);
        }


        on_event:exit()
        {
            // Stop audio recording.
//            sound_capture.abort();

            test_page.cleanup();
        }


        Trial trial
        {
            on_event:entry()
            {
                item = prac_items[practice.cycle];

                test_page.action(this, item, reference_time, practice.cycle);
            }
        }
    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }

    Block test_block {


        on_event:entry()
        {
            // Randomize test item table.
            if (shuffle_test_items() != OK) terminate;

            num_cycles = 3; // There are three test blocks

            // Prepare test page: progress bar enabled, prompt disabled.
            test_page.setup(num_cycles, false);

            // Create folder for audio recordings and start recording in 100ms.
            string dir = data_dir() + script_name() + "/";
            if (!file_exists(dir)) create_dir_tree(dir);
            string fn = dir + "ses-" +
                format(expdb.session.id, 4) + "-test.wav";
            sound_capture.rec(fn, reference_time + 100ms, 0s);
        }

        Part pause
        {
            on_event:entry()
            {
                pause_page.set_text(TEST_INSTRUCTION, true);
                pause_page.action(this);
            }
        }


        Block test
        {
            TestItem[] items; // current block of items
            TestItem   item;  // current item

            on_event:entry()
            {
                if (test_block.cycle == 0) {
                    items = test_items1;
                }
                else if (test_block.cycle == 1) {
                    items = test_items2;
                }
                else if (test_block.cycle == 2) {
                    items = test_items3;
                }
                else {
                    terminate "Initiating unanticipated block";
                }

                num_cycles = items.size;

                // Prepare test page: progress bar enabled, prompt disabled.
                test_page.setup(num_cycles, false);

                // Create folder for audio recordings and start recording in 100ms.
                string dir = data_dir() + script_name() + "/";
                if (!file_exists(dir)) create_dir_tree(dir);
                string fn = dir + "ses-" +
                    format(expdb.session.id, 4) + "-test.wav";
                sound_capture.rec(fn, reference_time + 100ms, 0s);
            }


            on_event:exit()
            {
                // Stop audio recording.
                sound_capture.abort();

                test_page.cleanup();

                save_trial_data();
            }


            Trial trial
            {
                on_event:entry()
                {
                    item = items[test.cycle];

                    test_page.action(this, item, reference_time, test.cycle);
                }


                on_event:exit()
                {
                    // Add new row to test output table.
                    TestOutput output;
                    output.trialnum = test.cycle + 1;
                    output.id = item.id;
                    output.trialtype = item.type;
                    output.imgfn = "PICTURE_" + item.pic_num;
                    test_output_append(output);
                }
            }
        }
    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }
}


void action(Part caller)
{
    // Activate the task. When the task is done, the registered caller
    // (c.q. the main experiment object) will automatically be signalled.
    task.enter(caller);
}
