/******************************************************************************\
FILE:           shuffle.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     -

DESCRIPTION:

Item table shuffling functions.


HISTORY:
2012-04-19 TV   Created.

\******************************************************************************/

const int NUM_TRIES = 1000;
TestItem[] items2_copy = {};

void append_test_item(TestItem[] items, TestItem item) {
    items.size = items.size + 1;
    items[items.size - 1] = item;
}

TestItem[] items_en_switch = {};
TestItem[] items_en_same = {};
TestItem[] items_nl_switch = {};
TestItem[] items_nl_same = {};

TrialType[] same_switch = {};

TrialType pop_trial_type() {
    TrialType ret = same_switch[same_switch.size-1];
    same_switch.size = same_switch.size - 1;
    return ret;
}

TestItem pop_test_item(TestItem[] items)
{
    TestItem ret = items[items.size-1];
    items.size = items.size - 1;
    return ret;
}

// Sorry for the global
bool g_pop_error = false;

// Tries to pop one item from items, as zep can't return None/Null etc
// This function sets the g_pop_error to true when no items can be popped from the
// array.
TestItem pop_test_item_error(TestItem[] items) {
    TestItem ret;
    if (items.size == 0) {
        g_pop_error = true;
        return ret;
    }
    ret = items[items.size-1];
    items.size = items.size - 1;
    return ret;
}

void
reset_items() {
    int i = 0;

    g_pop_error = false; // 

    // reset the copy
    items2_copy.size = 0;    
    while (i < test_items2.size) {
        append_test_item(items2_copy, test_items2[i]);
        i++;
    }
    items2_copy.shuffle(0, -1);

    // Create a template for trials that should be a same or switch
    // There should be a equal number of switch and same trials.
    if (same_switch.size != items2_copy.size) {
        same_switch.size = items2_copy.size;
        i = 0;
        while (i < same_switch.size) {
            if (i % 2 == 0) {
                same_switch[i] = SAME;
            }
            else {
                same_switch[i] = SWITCH;
            }
            i++;
        }
    }
    same_switch.shuffle(0, -1);

    // reset and fill the item with a similar type
    items_en_switch.size = 0;
    items_en_same.size = 0;
    items_nl_switch.size = 0;
    items_nl_same.size = 0;
    
    // Pop an item for the copy and put it in the appropriate bin
    i = 0;
    while (items2_copy.size > 0) {
        TestItem item = pop_test_item(items2_copy);
        if (item.type == SWITCH && item.cue == "EN") {
            append_test_item(items_en_switch, item);
        }
        else if (item.type == SAME && item.cue == "EN"){
            append_test_item(items_en_same, item);
        }
        else if (item.type == SWITCH && item.cue == "NL"){
            append_test_item(items_nl_switch, item);
        }
        else if (item.type == SAME && item.cue == "NL") {
            append_test_item(items_nl_same, item);
        }
        else {
            print_error("reset_items: unexpected item, report this\n");
        }

        i++;
    }

    if (items_en_switch.size != test_items2.size / 4 ||
        items_en_same.size != test_items2.size / 4 ||
        items_nl_switch.size != test_items2.size / 4 ||
        items_nl_same.size != test_items2.size / 4) {
        print_error("reset_items: was unable to reset the items in equal groups\n");
    }

    if (items2_copy.size != 0) {
        print_error("Oops we still have items left in items2_copy...\n");
    }
}

int count_items(TestItem[] items, TrialType type) {
    int i = 0;
    int count;
    while(i < items.size) {
        if (items[i].type == type) {
            count++;
        }
        i++;
    }
    return count;
}

bool
stimuli_meet_mixed_constraints(TestItem[] items) {
    
    int i = 1;
    
    int count_first = count_items(items, FIRST);
    int count_switch = count_items(items, SWITCH);
    int count_same = count_items(items, SAME);

    if (items.size != test_items2.size) {
        print_error("Oops: items.size != test_items2.size");
        return false;
    }

//    if (items[0].type != FIRST) {
//        print_error("Oops first items isn't FIRST.\n");
//        return false;
//    }

    if (count_first != 1) {
        print_error("Oops, expected to have exactly one FIRST items\n");
    }

    return (abs(count_switch - count_same) < 1) ? true : false;
}

bool refill_copy_in_shuffled_order() {
    int i = 0;

    TrialType t = pop_trial_type();
    TestItem first;

    string first_lang;

    // Pick a random first language
    int r = random(0,2);
    if (r == 0) {
        first_lang = "EN";
    }
    else if (r == 1) {
        first_lang = "NL";
    }
    else {
        print_error("Oops: r ain't 0 nor 1\n");
    }

    // Pick a switch or same item and pop the an appropriate item as first item.
    if (t == SWITCH) {
        if (first_lang == "NL"){
            first = pop_test_item(items_nl_switch);
        }
        else {
            first = pop_test_item(items_en_switch);
        }
    }
    else if (t == SAME) {
        if (first_lang == "NL"){
            first = pop_test_item(items_nl_same);
        }
        else {
            first = pop_test_item(items_en_same);
        }
    }
    else {
        print_error("Oops: popped a trial that ain't SWITCH nor SAME\n");
    }

    append_test_item(items2_copy, first);

    i = 1; // we've already popped the first items

    while (i < test_items2.size && !g_pop_error) {
        TestItem new;
        TestItem last = items2_copy[items2_copy.size-1];

        t = pop_trial_type();

        if (t == SWITCH) {
            if (last.cue == "EN") {
                new = pop_test_item_error(items_nl_switch);
            }
            else {
                new = pop_test_item_error(items_en_switch);
            }
        }
        else { // T == SAME
            if (last.cue == "EN") {
                new = pop_test_item_error(items_en_same);
            }
            else {
                new = pop_test_item_error(items_nl_same);
            }
        }

        // append the item to the queue
        append_test_item(items2_copy, new);

        i++;
    }

    return !g_pop_error;
}

int
shuffle_block2() {
    int i = 0;
    bool meet_constraints = false;

    while (!meet_constraints) {
        reset_items();
        if (!refill_copy_in_shuffled_order()) {
            i++;
            continue;
        }
        meet_constraints = stimuli_meet_mixed_constraints(items2_copy);
        i++;
    }

    if (!meet_constraints) {
        print_error("After " + NUM_TRIES + "tries, still not valid sequence found.\n");
    }
    else {
        i = 0;
        while (i < test_items2.size) {
            test_items2[i] = items2_copy[i];
            i++;
        }
        items2_copy.size = 0;
    }

    return meet_constraints ?  OK : ERROR;
}

// Shuffles test_items table (no restrictions on item order).
int shuffle_test_items()
{
    // For the first and third block, the first and second half of the items should be
    // shuffled separately.
    test_items1.shuffle(0, test_items1.size/2);
    test_items1.shuffle(test_items1.size/2, test_items1.size);

    // The second block is handled differently.
    shuffle_block2();
    
    test_items3.shuffle(0, test_items3.size/2);
    test_items3.shuffle(test_items3.size/2, test_items3.size);

    return OK;
}
